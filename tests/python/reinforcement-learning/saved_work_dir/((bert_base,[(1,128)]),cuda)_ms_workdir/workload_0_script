# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(placeholder: T.Buffer[(1, 128, 768), "float32"], T_divide: T.Buffer[(1, 128, 1), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        placeholder_red = T.alloc_buffer([1, 128, 1], dtype="float32")
        for ax0, ax1, ax2, k2 in T.grid(1, 128, 1, 768):
            with T.block("placeholder_red"):
                v_ax0, v_ax1, v_ax2, v_k2 = T.axis.remap("SSSR", [ax0, ax1, ax2, k2])
                T.reads(placeholder[v_ax0, v_ax1, v_k2])
                T.writes(placeholder_red[v_ax0, v_ax1, v_ax2])
                with T.init():
                    placeholder_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                placeholder_red[v_ax0, v_ax1, v_ax2] = placeholder_red[v_ax0, v_ax1, v_ax2] + placeholder[v_ax0, v_ax1, v_k2]
        for ax0, ax1, ax2 in T.grid(1, 128, 1):
            with T.block("T_divide"):
                v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                T.reads(placeholder_red[v_ax0, v_ax1, v_ax2])
                T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                T_divide[v_ax0, v_ax1, v_ax2] = placeholder_red[v_ax0, v_ax1, v_ax2] * T.float32(0.0013020833333333333)
    
