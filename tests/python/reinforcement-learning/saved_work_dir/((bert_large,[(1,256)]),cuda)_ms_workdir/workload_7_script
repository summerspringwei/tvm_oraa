# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(placeholder: T.Buffer[(1, 256, 1024), "float32"], placeholder_1: T.Buffer[(1, 3072, 1024), "float32"], placeholder_2: T.Buffer[3072, "float32"], T_add: T.Buffer[(1, 256, 3072), "float32"]):
        # function attr dict
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        compute = T.alloc_buffer([1, 256, 3072], dtype="float32")
        for b, i, j, k in T.grid(1, 256, 3072, 1024):
            with T.block("compute"):
                v_b, v_i, v_j, v_k = T.axis.remap("SSSR", [b, i, j, k])
                T.reads(placeholder[0, v_i, v_k], placeholder_1[0, v_j, v_k])
                T.writes(compute[v_b, v_i, v_j])
                with T.init():
                    compute[v_b, v_i, v_j] = T.float32(0)
                compute[v_b, v_i, v_j] = compute[v_b, v_i, v_j] + placeholder[0, v_i, v_k] * placeholder_1[0, v_j, v_k]
        for ax0, ax1, ax2 in T.grid(1, 256, 3072):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                T.reads(compute[v_ax0, v_ax1, v_ax2], placeholder_2[v_ax2])
                T.writes(T_add[v_ax0, v_ax1, v_ax2])
                T_add[v_ax0, v_ax1, v_ax2] = compute[v_ax0, v_ax1, v_ax2] + placeholder_2[v_ax2]
    
